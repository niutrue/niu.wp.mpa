啥也别说了，一句一句比着写吧。

1.webpack本地安装比较好
2.npm-script  https://docs.npmjs.com/misc/scripts 使用npm-script来操作webpack
3.webpack直接支持import export
4.完全可以写两个配置文件，不怕麻烦的话。npm script里执行不同的文件名(猜测)
5.webpack就是使用一个配置文件。基本格式是此文件导出一个对象
6.知识点(文档里有):模块;配置;
7.npm script可以直接通过包名来索引包，而不是通过完整的路径去
8.指南:如何安装webpack
9.source(src)是开发者编写的代码，distribution(dist)是压缩优化后的，最终被浏览器加载的浏览器中的代码

10.需要一个配置文件，需要一个入口js，需要一个引入js的页面。最基本的。

11.写成这样：module.exports = Config;
function Config(env){
	console.log(env)
}

导出一个函数，函数可以接收到CLI命令的参数 --env production  前面是参数名字，后面是参数值

12.本来在外面写一个webpack.config.js就够用了。可是呢，需要的webpack功能太多了，把webpack.config.js分解开来就好了。
module.exports可以是一个对象，也可以是一个返回对象的函数。

13.在base.config.js里面 通过process.env.npm_lifecycle_event来区分什么命令，比如，build和dev。主要是区分这两个环境。

14.配置最重要的就是那个对象，我学的这个把对象属性拿出来作为属性来写了。
15.resolve参数。改变模块解析的方式。
 resolve.alias:可以给文件的路径起一个小名，使用起来更加方便。
 resolve.extensions 自动解析扩展名。导入文件的时候不用加扩展名了。

16.Object.keys()返回对象自己的属性值组成的数组。
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
forEach使用提供的函数处理数组的每个元素
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach

17.htmlwebpackplugin插件是用来生成HTML文件的插件
18.根据入口文件，来使用对应的模板来生成相应的页面。一个入口文件一个htmlwebpackplugin实例，加到plugin数组里面
19.一个对象的方法返回this，可以链式的调用。
20.template参数着这里是一个返回ejs的js。本页的js设置了本页的标题。然后公共js去渲染模板组合模板去了。
21.ejs文件可以require过来放在一个变量里面。变量()，里面是一个对象参数。可以是字符串，也可以是其他的ejs模板。
22.公共js,css,ejs放src的组件文件夹里了。页面自己的，ejs,css.js放在自己文件夹里面
23.这个搞了个路径代理。还不错。就是文件的路径写在一个文件里。
24.改css会更新，js会。改ejs不会热更新。因为ejs全部都在template里面。想热更新的话，改css好了。我用pug也能实现相同的效果。我甚至能实现pug热更新。
25.var people = {
	name:'niu'
}

26.Object.assign() 把目标对象的所有可枚举的自有属性复制给一个对象然后返回。

27.base.config导出了一个函数，函数返回了一个对象。这和直接返回对象有啥区别啊？
28.dev.congig获取基本的config。设置dev对应的source-map，导出文件名。
加入dev需要的加载器。
29.使用webpack-merge合并了一个对象。和28的功能类似。导出一个返回对象的函数。
30.分模块的js，只要引用了都是会执行的。不是指返回一个对象。是要把代码执行一遍的。
31.config根据参数，获取dev模块。其实是一个函数，执行函数。获得一个最终的配置对象。
获取dev就会执行dev.js。dev从base文件获取最基本的配置对象
32.就是入口   分环境   基本配置对象。这是一种webpack配置文件设计模式。

33.这个webpack是写了个如何配置，根据参数来获取dev配置或pro配置。dev配置或pro配置获取基本配置。
    baseConfig + dev.config + pro.config + 入口

   是编写多页面的webpack。

   我自己使用less,pug来搞一遍。

34.自己重新开发一遍。
................
35.output的path是绝对路径啊
36.开始使用es6。字符串模板，常量用const。

37.加参数 --watch 监视模式。文件有改动，自动编译。但是浏览器不自动刷新。
38.提供简单的服务器，可以现场更新。安装 webpack-dev-server模块，npm-script改成 webpack-dev-server  不加--watch也行的。  contentBase:服务哪里的内容。
39.热模块加载:允许所有种类的模块在运行时更新，而不是全部刷新。
只更新改动的。
需要有webpack插件，plugins里加 webpack.HotModuleReplacementPlugin  devServer 加hot参数

40.当多个入口js。导出文件名为[name].bundle.js时。index上的文件名字需要手动添加。有hash更麻烦。
使用html-webpack-plugin插件可以解决这个问题。是的,不用手动在页面改引入js的名字了。
41.单页面单js。单页面，多js。多页面，多js

42.编译之前清理dist文件夹 clean-webpack-plugin  开始不行，然后我又改了一个路径。
